// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WebApplicationTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FindElements")]
    public partial class FindElementsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FindElements.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FindElements", "So that I can work with multiple browsers\r\nI want to issue a find element command" +
                    " to a single driver\r\nand have that distributed to multiple drivers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find Elements")]
        [NUnit.Framework.CategoryAttribute("SuperDriver")]
        [NUnit.Framework.CategoryAttribute("FindElements")]
        [NUnit.Framework.TestCaseAttribute("TagName", "a", "3", null)]
        [NUnit.Framework.TestCaseAttribute("TagName", "article", "1", null)]
        [NUnit.Framework.TestCaseAttribute("TagName", "div", "4", null)]
        [NUnit.Framework.TestCaseAttribute("Id", "name", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ClassName", "test", "2", null)]
        [NUnit.Framework.TestCaseAttribute("CssSelector", "nav ul li", "3", null)]
        [NUnit.Framework.TestCaseAttribute("LinkText", "Link B", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Name", "email", "1", null)]
        [NUnit.Framework.TestCaseAttribute("PartialLinkText", "Link", "3", null)]
        [NUnit.Framework.TestCaseAttribute("XPath", "/html/body/main/article/header/h2[1]", "1", null)]
        public virtual void FindElements(string by, string selector, string numberOfMatches, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SuperDriver",
                    "FindElements"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Elements", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I am on the Test Form page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When(string.Format("I select elements \"{0}\" \"{1}\"", by, selector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then(string.Format("there should be {0}", numberOfMatches), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find Element")]
        [NUnit.Framework.CategoryAttribute("SuperDriver")]
        [NUnit.Framework.CategoryAttribute("FindElement")]
        [NUnit.Framework.TestCaseAttribute("TagName", "h2", "Test Heading", null)]
        [NUnit.Framework.TestCaseAttribute("Id", "testheading", "Test Sub A", null)]
        [NUnit.Framework.TestCaseAttribute("CssSelector", "main h2", "Test Heading", null)]
        [NUnit.Framework.TestCaseAttribute("LinkText", "Link B", "Link B", null)]
        [NUnit.Framework.TestCaseAttribute("XPath", "/html/body/main/article/header/h2[1]", "Test Heading", null)]
        public virtual void FindElement(string by, string selector, string content, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SuperDriver",
                    "FindElement"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Element", @__tags);
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I am on the Test Form page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When(string.Format("I select an element \"{0}\" \"{1}\"", by, selector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then(string.Format("the text should be \"{0}\"", content), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
